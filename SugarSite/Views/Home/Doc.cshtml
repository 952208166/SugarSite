
@{
    ViewBag.Title = Model.ResultInfo.CurrentType.TypeName + PubConst.SitePrefix;
    Layout = "~/Views/Shared/_Layout.cshtml";
    var type = Model.ResultInfo.DocType;
    var fist = type.Where(it => it.Level == 1).ToList();
}
@using Infrastructure.ViewModels
@using Infrastructure.Pub;
@using SyntacticSugar
@section css{
    <link href="~/_theme/ueditor/utf8-net/third-party/SyntaxHighlighter/shCoreDefault.css" rel="stylesheet" />
    <style>
        .syntaxhighlighter .keyword {
            color: #cc86d4 !important;
        }
        .syntaxhighlighter td.code .line{
           line-height: 1.8 !important;
        }
        .site-h1 {
          color:#f60!important
        }
    </style>
}
@section js{
    <script src="~/_theme/ueditor/utf8-net/third-party/SyntaxHighlighter/shCore.js"></script>
    <script type="text/javascript">SyntaxHighlighter.all();</script>
}
@model ResultModel<Doc>
<div class="layui-main site-inline">
    <div class="site-tree">
        <ul class="layui-tree">
            @if (type.IsValuable() && fist.IsValuable())
            {

                foreach (var item in fist)
                {
                    var itemChildren = type.Where(it => item.Id == it.ParentId).ToList();
                    <li><h2>@item.TypeName</h2></li>
                    foreach (var childItem in itemChildren)
                    {
                        <li class="site-tree-noicon @((Model.ResultInfo.CurrentType.Id==childItem.Id).IIF("layui-this",""))">
                            <a href="@Url.Action("Doc",new { typeId=childItem.Id})"><cite>@childItem.TypeName</cite></a>
                        </li>
                    }
                }
            }
        </ul>
    </div>
    <div class="site-content">
        @if (Model.ResultInfo.DocContent.IsValuable())
        {
            var list = Model.ResultInfo.DocContent.Where(it => it.TypeId == Model.ResultInfo.CurrentType.Id).ToList();
            foreach (var item in list)
            {
                <h1 class="site-h1">@item.Title</h1>
                <div>
                    @Html.Raw(item.Content)
                </div>
            }
        }
    </div>
</div>
